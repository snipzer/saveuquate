import path from 'path';
import _ from 'underscore';
import express from 'express';
import bodyParser from 'body-parser';

import KittenController from './controller/kittenController';


export default class Server {
    constructor()
    {
        this._app = express();

        this._app.use(express.static(path.join(__dirname, '/../public')));


        this._app.use(bodyParser.json());
        this._app.use(bodyParser.urlencoded({extended: true}));


        this._app.set('view engine', 'twig');
        this._app.set('views', path.join(__dirname, '../src/views/'));
    }

    setPort(port)
    {
        if (_.isEmpty(port))
        {
            port = 3000;
        }

        this.port = port;
    }

    _initControllers()
    {
        const kittenController = new KittenController();

        this._app.get('/', kittenController.index.bind(kittenController));

        this._app.get('/showAll', kittenController.showAll.bind(kittenController));

        this._app.get('/showNonAdopted', kittenController.showNonAdopted.bind(kittenController));


        /**
         * @api {get} /v1/kittens 1 Get all kittens
         * @apiName GetKittens
         * @apiGroup kitten
         *
         * @apiSuccess {Array[]} array List of kittens
         * @apiSuccess {Object} array.kittens Detail of a kitten
         * @apiSuccess {String} array.kittens.id The kitten id is 24 character length auto-generated by mongoDB
         * @apiSuccess {String} array.kittens.name The name of the kitten, is required and should be unique
         * @apiSuccess {String} array.kittens.color The color of the kitten, is required
         * @apiSuccess {String} array.kittens.primaryQuality The primary quality of the kitten, is required
         * @apiSuccess {String} array.kittens.secondQuality The second quality of the kitten, is optionnal
         * @apiSuccess {String} array.kittens.primaryDefault The primary default of the kitten, is required
         * @apiSuccess {String} array.kittens.kibbles The prefered brand of kibbles for the kitten
         * @apiSuccess {Boolean} array.kittens.isAvailable Is the kitten already adopted or not
         */
        this._app.get('/v1/kittens', kittenController.getKittens.bind(kittenController));


        /**
         * @api {get} /v1/kittens/:id 2 Get one kitten
         * @apiVersion 0.0.1
         * @apiName GetKitten
         * @apiGroup kitten
         *
         * @apiParam {String} id The kitten id is 24 character length auto-generated by mongoDB
         *
         * @apiSuccess {Object} kittens Detail of a kitten
         * @apiSuccess {String} kittens.id The kitten id is 24 character length auto-generated by mongoDB
         * @apiSuccess {String} kittens.name The name of the kitten, is required and should be unique
         * @apiSuccess {String} kittens.color The color of the kitten, is required
         * @apiSuccess {String} kittens.primaryQuality The primary quality of the kitten, is required
         * @apiSuccess {String} kittens.secondQuality The second quality of the kitten, is optionnal
         * @apiSuccess {String} kittens.primaryDefault The primary default of the kitten, is required
         * @apiSuccess {String} kittens.kibbles The prefered brand of kibbles for the kitten
         * @apiSuccess {Boolean} kittens.isAvailable Is the kitten already adopted or not
         *
         * @apiError KittenNotFound The id of the kitten is not existant
         */
        this._app.get('/v1/kittens/:id', kittenController.getKitten.bind(kittenController));

        /**
         * @api {post} /v1/kittens 3 Create one kitten
         * @apiVersion 0.0.1
         * @apiName PostKitten
         * @apiGroup kitten
         *
         * @apiParam {String} name The name of the kitten, is required and should be unique
         * @apiParam {String} color The color of the kitten, is required
         * @apiParam {String} primaryQuality The primary quality of the kitten, is required
         * @apiParam {String} secondQuality The second quality of the kitten, is optionnal
         * @apiParam {String} primaryDefault The primary default of the kitten, is required
         * @apiParam {String} kibbles The prefered brand of kibbles for the kitten
         *
         * @apiError ParameterRequired All the param are required except secondQuality
         */
        this._app.post('/v1/kittens', kittenController.postKitten.bind(kittenController));

        /**
         * @api {put} /v1/kittens 4 Update one kitten
         * @apiVersion 0.0.1
         * @apiName PutKitten
         * @apiGroup kitten
         *
         * @apiParam {String} id The kitten id is 24 character length auto-generated by mongoDB
         * @apiParam {String} name The name of the kitten, is required and should be unique
         * @apiParam {String} color The color of the kitten, is required
         * @apiParam {String} primaryQuality The primary quality of the kitten, is required
         * @apiParam {String} secondQuality The second quality of the kitten, is optionnal
         * @apiParam {String} primaryDefault The primary default of the kitten, is required
         * @apiParam {String} kibbles The prefered brand of kibbles for the kitten

         *
         * @apiError KittenNotFound The id of the kitten is not existant
         * @apiError ParameterRequired All the param are required except secondQuality
         */
        this._app.put('/v1/kittens', kittenController.putKitten.bind(kittenController));

        /**
         * @api {delete} /v1/kittens 5 Delete one kitten
         * @apiVersion 0.0.1
         * @apiName DeleteKitten
         * @apiGroup kitten
         *
         * @apiParam {String} id The kitten id is 24 character length auto-generated by mongoDB
         *
         * @apiError KittenNotFound The id of the kitten is not existant
         */
        this._app.delete('/v1/kittens', kittenController.killKitten.bind(kittenController));
    }

    run()
    {
        this._initControllers();

        this._app.listen(this.port, () => console.log(`Server listening on port ${this.port}!`));
    }
}